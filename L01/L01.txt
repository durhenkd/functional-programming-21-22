
{- 
    Q 1.3.1: Can you name a language which has a REPL?
    A: Yes, Python, Ruby

    E 1.9.1: Consider the expression fact 5 - 1. What result do you expect to get?
    A: 119. Function fact expects only one paramater so it will take the 5 in the expression, returning 120.

    E 1.9.2: Find two values for b, b1 and b2 such that b2 = b1 + 1 and slowAdd overflows for b2, but it doesnâ€™t for b1.
    A: 4940 and 4941. Of course, they seem to me arbitrary values. I would have loved to see how actually big is the call stack size, but every google search
        takes e to "Maximum call stack size exceeded" error. However, i estimate it should be roughly 120kB.

    E: 1.9.3: Evaluate the following expressions in the REPL: (fib 40), (fib 45) and (fib 50). How long does each take?
    A:  (fib 40) ~ 1 sec
        (fib 45) ~ 11 sec
        (fib 50) ~ 2 min 20 sec

    E: 1.9.4: Evaluate the following expressions in the REPL: (fibTail 50), (fibTail 100) and (fibTail 1000). How long does each take?
    A:  (fibTail 50)    ~ 1 sec
        (fibTail 100)   ~ 1 sec
        (fibTail 1000)  ~ 1 sec
    
 -} 

{-
    E: 1.10.1: Implement in Elm the Euclid-style greatest common divisor function, gcd a b, in a tail recursive manner.
        Be sure to test your implementation for all of these values! Did you manage to implement the function without getting any compile errors?
    A:  I tested the implementation, it works, i didn't get any compile errors
-}

gcd a b = if (b == 0) then a else gcd b (modBy b a)


{-
    E: 1.10.2: Write an Elm function called ack, which computes the values of the Ackermann function (denoted by A), defined as follows
    A:  I tested the implementation, it works, i didn't get any compile errors
-}

ack n m = if (n == 0) then (m+1) else if (m == 0) then ack (n-1) 1 else ack (n-1) (ack n (m-1))

{-
    E: 1.10.3: Write an Elm function called sudan, which computes the values of the function of Gabriel Sudan (denoted by S), defined as follows:
    A:  I tested the implementation, it works, i didn't get any compile errors
-}

sudan n x y = if (n == 0) then (x+y) else if (n > 0 && y == 0) then x else sudan (n-1) (sudan n x (y-1)) (y + (sudan n x (y-1)))